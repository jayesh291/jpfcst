# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
# ylimmin <- min(singleMeterData$val)
ylimmin =0
if( ylimmax < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
mapeForecastError[is.na(mapeForecastError)] <- 0.00001
mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# sMAPE
denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
smape = (1/7)* nmratr /denominator;
datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
df.fc <- as.data.frame(datas)
# Forecast error : Average of MAPE
mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
errorSummary <- c(errorSummary,mapeMean)
fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
dev.off()
pdf(file=paste0("./outs/fctplot",todaysDate,".pdf"))
errorSummary <- c()
noOfDaystoPredict <- 7
i=1
for(meterid in meterids){
testcnt=10
if(i > testcnt){
break
}
i<- i+1
singleMeterData <- meterdata[meterdata$id == meterid,c("id","ts","val","ts1")]
singleMeterData[is.na(singleMeterData)] <- 0
testcnt=1
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
while(testcnt < 30){
testcnt <- testcnt + 1
message(" values ", testcnt)
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
singleMeterData$val <- as.numeric(singleMeterData$val)
singleMeterData$ts1 <- as.POSIXct(singleMeterData$ts1)
singleMeterData$ts <- as.POSIXct(singleMeterData$ts)
# str(singleMeterData)
tsMeterData <- singleMeterData$val
ma <- movingAverage(tsMeterData,noOfDaystoPredict)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
singleMeterData$ma <- ma
# Need to handle spike and vally's
baseValue <- basevalue(tsMeterData,noOfDaystoPredict)
singleMeterData$baseValue <- baseValue
dailyPatterns <- dailyPattern(tsMeterData,ma,noOfDaystoPredict)
length(dailyPatterns)
singleMeterData$dailyPattern <- dailyPatterns
trend <- ratioPrevMA(ma,dailyPatterns, noOfDaystoPredict)
singleMeterData$trend <- trend
prediction <- baseValue*dailyPatterns*trend
singleMeterData$pred <- prediction
str(singleMeterData)
singleMeterData[nrow(singleMeterData),"val"]<- prediction[length(prediction)]
# singleMeterData[nrow(singleMeterData),c("ma","baseValue","dailyPattern","trend","pred")]<- c(ma[length(ma)],baseValue[length(baseValue)],dailyPatterns[length(dailyPatterns)],trend[length(trend)],prediction[length(prediction)])
# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
# ylimmin <- min(singleMeterData$val)
ylimmin =0
if( ylimmax < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
mapeForecastError[is.na(mapeForecastError)] <- 0.00001
mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# sMAPE
denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
smape = (1/7)* nmratr /denominator;
datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
df.fc <- as.data.frame(datas)
# Forecast error : Average of MAPE
mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
errorSummary <- c(errorSummary,mapeMean)
fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
dev.off()
ylimmax <- max(singleMeterData$val)
ylimmin <- min(singleMeterData$val)
if( ylimmax < 0 || ylimmin < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
meterids <- unique(meterdata$id)
meterid <- sample(meterids,1)
meterid <- "FE7F4454-20F3-45E7-B3BF-959A6F0B6F57"
todaysDate <-format(Sys.time(), "%a%b%d%Y%H%S")
pdf(file=paste0("./outs/fctplot",todaysDate,".pdf"))
errorSummary <- c()
noOfDaystoPredict <- 7
i=1
for(meterid in meterids){
testcnt=10
if(i > testcnt){
break
}
i<- i+1
singleMeterData <- meterdata[meterdata$id == meterid,c("id","ts","val","ts1")]
singleMeterData[is.na(singleMeterData)] <- 0
testcnt=1
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
while(testcnt < 30){
testcnt <- testcnt + 1
message(" values ", testcnt)
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
singleMeterData$val <- as.numeric(singleMeterData$val)
singleMeterData$ts1 <- as.POSIXct(singleMeterData$ts1)
singleMeterData$ts <- as.POSIXct(singleMeterData$ts)
# str(singleMeterData)
tsMeterData <- singleMeterData$val
ma <- movingAverage(tsMeterData,noOfDaystoPredict)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
singleMeterData$ma <- ma
# Need to handle spike and vally's
baseValue <- basevalue(tsMeterData,noOfDaystoPredict)
singleMeterData$baseValue <- baseValue
dailyPatterns <- dailyPattern(tsMeterData,ma,noOfDaystoPredict)
length(dailyPatterns)
singleMeterData$dailyPattern <- dailyPatterns
trend <- ratioPrevMA(ma,dailyPatterns, noOfDaystoPredict)
singleMeterData$trend <- trend
prediction <- baseValue*dailyPatterns*trend
singleMeterData$pred <- prediction
str(singleMeterData)
singleMeterData[nrow(singleMeterData),"val"]<- prediction[length(prediction)]
# singleMeterData[nrow(singleMeterData),c("ma","baseValue","dailyPattern","trend","pred")]<- c(ma[length(ma)],baseValue[length(baseValue)],dailyPatterns[length(dailyPatterns)],trend[length(trend)],prediction[length(prediction)])
# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
ylimmin <- min(singleMeterData$val)
if( ylimmax < 0 || ylimmin < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
mapeForecastError[is.na(mapeForecastError)] <- 0.00001
mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# sMAPE
denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
smape = (1/7)* nmratr /denominator;
datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
df.fc <- as.data.frame(datas)
# Forecast error : Average of MAPE
mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
errorSummary <- c(errorSummary,mapeMean)
fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
dev.off()
source("libs.R")
source("dataset.R")
source("basevalue.R")
source("movingAverage.R")
source("dailyPattern.R")
source("ratioPrevMA.R")
library(gdata)
meterdata <- trained_data_set("./inputs/temp_dmd_data_daily_20170307.txt")
meterids <- unique(meterdata$id)
meterid <- sample(meterids,1)
meterid <- "FE7F4454-20F3-45E7-B3BF-959A6F0B6F57"
todaysDate <-format(Sys.time(), "%a%b%d%Y%H%S")
pdf(file=paste0("./outs/fctplot",todaysDate,".pdf"))
errorSummary <- c()
noOfDaystoPredict <- 7
i=1
for(meterid in meterids){
testcnt=10
if(i > testcnt){
break
}
i<- i+1
singleMeterData <- meterdata[meterdata$id == meterid,c("id","ts","val","ts1")]
singleMeterData[is.na(singleMeterData)] <- 0
testcnt=1
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
while(testcnt < 30){
testcnt <- testcnt + 1
message(" values ", testcnt)
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
singleMeterData$val <- as.numeric(singleMeterData$val)
singleMeterData$ts1 <- as.POSIXct(singleMeterData$ts1)
singleMeterData$ts <- as.POSIXct(singleMeterData$ts)
# str(singleMeterData)
tsMeterData <- singleMeterData$val
ma <- movingAverage(tsMeterData,noOfDaystoPredict)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
singleMeterData$ma <- ma
# Need to handle spike and vally's
baseValue <- basevalue(tsMeterData,noOfDaystoPredict)
singleMeterData$baseValue <- baseValue
dailyPatterns <- dailyPattern(tsMeterData,ma,noOfDaystoPredict)
length(dailyPatterns)
singleMeterData$dailyPattern <- dailyPatterns
trend <- ratioPrevMA(ma,dailyPatterns, noOfDaystoPredict)
singleMeterData$trend <- trend
prediction <- baseValue*dailyPatterns*trend
singleMeterData$pred <- prediction
str(singleMeterData)
singleMeterData[nrow(singleMeterData),"val"]<- prediction[length(prediction)]
# singleMeterData[nrow(singleMeterData),c("ma","baseValue","dailyPattern","trend","pred")]<- c(ma[length(ma)],baseValue[length(baseValue)],dailyPatterns[length(dailyPatterns)],trend[length(trend)],prediction[length(prediction)])
# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
ylimmin <- min(singleMeterData$val)
if( ylimmax < 0 || ylimmin < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
mapeForecastError[is.na(mapeForecastError)] <- 0.00001
mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# sMAPE
denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
smape = (1/7)* nmratr /denominator;
datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
df.fc <- as.data.frame(datas)
# Forecast error : Average of MAPE
mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
errorSummary <- c(errorSummary,mapeMean)
fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
source("libs.R")
source("dataset.R")
source("basevalue.R")
source("movingAverage.R")
source("dailyPattern.R")
source("ratioPrevMA.R")
library(gdata)
meterdata <- trained_data_set("./inputs/temp_dmd_data_daily_20170307.txt")
meterids <- unique(meterdata$id)
meterid <- sample(meterids,1)
meterid <- "FE7F4454-20F3-45E7-B3BF-959A6F0B6F57"
todaysDate <-format(Sys.time(), "%a%b%d%Y%H%S")
pdf(file=paste0("./outs/fctplot",todaysDate,".pdf"))
errorSummary <- c()
noOfDaystoPredict <- 7
i=1
for(meterid in meterids){
testcnt=10
if(i > testcnt){
break
}
i<- i+1
singleMeterData <- meterdata[meterdata$id == meterid,c("id","ts","val","ts1")]
singleMeterData[is.na(singleMeterData)] <- 0
testcnt=1
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
while(testcnt < 30){
testcnt <- testcnt + 1
message(" values ", testcnt)
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
singleMeterData$val <- as.numeric(singleMeterData$val)
singleMeterData$ts1 <- as.POSIXct(singleMeterData$ts1)
singleMeterData$ts <- as.POSIXct(singleMeterData$ts)
# str(singleMeterData)
tsMeterData <- singleMeterData$val
ma <- movingAverage(tsMeterData,noOfDaystoPredict)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
singleMeterData$ma <- ma
# Need to handle spike and vally's
baseValue <- basevalue(tsMeterData,noOfDaystoPredict)
singleMeterData$baseValue <- baseValue
dailyPatterns <- dailyPattern(tsMeterData,ma,noOfDaystoPredict)
length(dailyPatterns)
singleMeterData$dailyPattern <- dailyPatterns
trend <- ratioPrevMA(ma,dailyPatterns, noOfDaystoPredict)
singleMeterData$trend <- trend
prediction <- baseValue*dailyPatterns*trend
singleMeterData$pred <- prediction
str(singleMeterData)
singleMeterData[nrow(singleMeterData),"val"]<- prediction[length(prediction)]
# singleMeterData[nrow(singleMeterData),c("ma","baseValue","dailyPattern","trend","pred")]<- c(ma[length(ma)],baseValue[length(baseValue)],dailyPatterns[length(dailyPatterns)],trend[length(trend)],prediction[length(prediction)])
# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
ylimmin <- min(singleMeterData$val)
if( ylimmax < 0 || ylimmin < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
# forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
# mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
# mapeForecastError[is.na(mapeForecastError)] <- 0.00001
# mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# # sMAPE
# denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
# nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
# smape = (1/7)* nmratr /denominator;
# datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
# df.fc <- as.data.frame(datas)
# # Forecast error : Average of MAPE
# mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
# errorSummary <- c(errorSummary,mapeMean)
# fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
dev.off()
source("libs.R")
source("dataset.R")
source("basevalue.R")
source("movingAverage.R")
source("dailyPattern.R")
source("ratioPrevMA.R")
library(gdata)
meterdata <- trained_data_set("./inputs/temp_dmd_data_daily_20170307.txt")
meterids <- unique(meterdata$id)
meterid <- sample(meterids,1)
meterid <- "FE7F4454-20F3-45E7-B3BF-959A6F0B6F57"
todaysDate <-format(Sys.time(), "%a%b%d%Y%H%S")
pdf(file=paste0("./outs/fctplot",todaysDate,".pdf"))
errorSummary <- c()
noOfDaystoPredict <- 7
i=1
for(meterid in meterids){
testcnt=10
if(i > testcnt){
break
}
i<- i+1
singleMeterData <- meterdata[meterdata$id == meterid,c("id","ts","val","ts1")]
singleMeterData[is.na(singleMeterData)] <- 0
testcnt=1
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
while(testcnt < 30){
testcnt <- testcnt + 1
message(" values ", testcnt)
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
singleMeterData$val <- as.numeric(singleMeterData$val)
singleMeterData$ts1 <- as.POSIXct(singleMeterData$ts1)
singleMeterData$ts <- as.POSIXct(singleMeterData$ts)
# str(singleMeterData)
tsMeterData <- singleMeterData$val
ma <- movingAverage(tsMeterData,noOfDaystoPredict)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
singleMeterData$ma <- ma
# Need to handle spike and vally's
baseValue <- basevalue(tsMeterData,noOfDaystoPredict)
singleMeterData$baseValue <- baseValue
dailyPatterns <- dailyPattern(tsMeterData,ma,noOfDaystoPredict)
length(dailyPatterns)
singleMeterData$dailyPattern <- dailyPatterns
trend <- ratioPrevMA(ma,dailyPatterns, noOfDaystoPredict)
singleMeterData$trend <- trend
prediction <- baseValue*dailyPatterns*trend
singleMeterData$pred <- prediction
singleMeterData[nrow(singleMeterData),"val"]<- prediction[length(prediction)]
# singleMeterData[nrow(singleMeterData),c("ma","baseValue","dailyPattern","trend","pred")]<- c(ma[length(ma)],baseValue[length(baseValue)],dailyPatterns[length(dailyPatterns)],trend[length(trend)],prediction[length(prediction)])
# appendSingleMeterData <-
# str(singleMeterData)
# write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
}
# }
# str(singleMeterData)
write.csv(singleMeterData,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
#  Plot the graph with actual and predicted
ylimmax <- max(singleMeterData$val)
ylimmin <- min(singleMeterData$val)
if( ylimmax < 0 || ylimmin < 0){
ylimmax=3
ylimmin =0
}
plot(0,0,xlim = c(1,length(singleMeterData$val)),
ylim=(c(0,3)),type = "n",xlab = meterid)
lines(singleMeterData$val,type = 'l')
lines(singleMeterData$pred,type = 'l', col = "red")
# Forecast error calulation
# MAPE
# write.csv(singleMeterData,file=paste0("./outs/",meterid,"_steps.csv"))
# forecastError <- fc$tsMeterData[1:(length(fc$prediction)-8)]-fc$prediction[1:(length(fc$prediction)-8)]
# mapeForecastError <- abs(forecastError/fc$tsMeterData[1:(length(trend)-8)]) * 100
# mapeForecastError[is.na(mapeForecastError)] <- 0.00001
# mapeForecastError[is.infinite(mapeForecastError)] <- 0.00001
# # sMAPE
# denominator <- abs(fc$prediction[1:(length(fc$prediction)-8)]+fc$tsMeterData[1:(length(fc$prediction)-8)])/2
# nmratr <- abs(fc$prediction[1:(length(fc$prediction)-8)]-fc$tsMeterData[1:(length(fc$prediction)-8)])
# smape = (1/7)* nmratr /denominator;
# datas <- cbindX(data.frame(fc$tsMeterData), data.frame(fc$prediction), data.frame(mapeForecastError),data.frame(smape))
# df.fc <- as.data.frame(datas)
# # Forecast error : Average of MAPE
# mapeMean=mean(mapeForecastError[length(mapeForecastError)-15:(length(mapeForecastError)-8)])
# errorSummary <- c(errorSummary,mapeMean)
# fileName <- paste0("./outs/",meterid,"mape_",mapeMean,"_",todaysDate,".csv")
# write.csv(df.fc,file=fileName)
}
dev.off()
meterid <- "FE7F4454-20F3-45E7-B3BF-959A6F0B6F57"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData[is.na(singleMeterData)] <- 0
write.csv(singleMeterData,"./outs/",meterid,".csv")
write.csv(singleMeterData,file = "./outs/",meterid,".csv")
singleMeterData
write.csv(singleMeterData,file =paste0( "./outs/",meterid,".csv"))
meterid <- "0862C02E-73CA-4964-9661-6D783EF2DE7B"
singleMeterData <- meterdata[meterdata$id == meterid,]
plot(meterid)
plot.ts(meterid)
singleMeterData
write.csv(singleMeterData,file =paste0( "./outs/",meterid,".csv"))
meterid <- "089FB058-CD33-41DD-9AFF-F00795122C6E_FriMar3120171536"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData[is.na(singleMeterData)] <- 0
write.csv(singleMeterData,file =paste0( "./outs/",meterid,".csv"))
meterid <- "089FB058-CD33-41DD-9AFF-F00795122C6E"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData[is.na(singleMeterData)] <- 0
write.csv(singleMeterData,file =paste0( "./outs/",meterid,".csv"))
plot(singleMeterData$val)
plot(singleMeterData$val, type="l")
decompose(singleMeterData$val)
decompose(ts(singleMeterData$val,frequency = 7))
dc <- decompose(ts(singleMeterData$val,frequency = 7))
plot(dc)
arFactor
singleMeterData <- meterdata[meterdata$id == meterid,]
str(singleMeterData)
head(singleMeterData)
tsMeterData <- ts(singleMeterData$val)
arFactor <- ar(tsMeterData)
arFactor
