par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
singleMeterData$val <- sevanDays
# print(plot(after,type="l"))
i <- i+1
}
dev.off()
i=1
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
df$val
sevanDays
source("timeseriesImpute.R")
pdf(file="./outs/test.pdf")
meterids <- unique(meterdata[,c("id")])
i=1
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
dev.off()
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
message("original",df$val," predicted",length(sevanDays))
message("original",length(df$val)," predicted",length(sevanDays))
message("original -: ",length(df$val)," predicted -: ",length(sevanDays))
message("original -: ",sum(is.na(df$val))," predicted -: ",sum(is.na(sevanDays)))
source("timeseriesImpute.R")
pdf(file="./outs/test.pdf")
meterids <- unique(meterdata[,c("id")])
i=1
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
message("original -: ",sum(is.na(df$val))," predicted -: ",sum(is.na(sevanDays)))
timeseries <- singleMeterData$val
days <- 7
imputeFromNumOfDaysBefore <- function(timeseries,days){
timeseries <- singleMeterData$val
days <- 7
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if(!is.null(timeseries[i-days]) | !is.na(timeseries[i-days])){
timeseries[i-days]
}else{
for(j in 2:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}
}
i <- i+1
}
return(timeseries)
}
meterid <- "0eda79b9-53f2-4d24-bb60-5186437d4fe2"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
graphics.off()
meterid <- "0eda79b9-53f2-4d24-bb60-5186437d4fe2"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
mterid <- "e9e42c5f-c141-4ef1-a203-75672ee58e6b"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
meterid <- "f3523f2e-c5ff-4545-893b-0f3c335161e1"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
imputeFromNumOfDaysBefore <- function(timeseries,days){
timeseries <- singleMeterData$val
days <- 7
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if(i< days & !is.null(timeseries[i-days]) | !is.na(timeseries[i-days])){
timeseries[i-days]
}else{
for(j in 2:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}
}
i <- i+1
}
return(timeseries)
}
meterid <- "f3523f2e-c5ff-4545-893b-0f3c335161e1"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
imputeFromNumOfDaysBefore <- function(timeseries,days){
timeseries <- singleMeterData$val
days <- 7
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if( !is.null(timeseries[i-days]) | !is.na(timeseries[i-days])){
timeseries[i] <- ifelse(i< days,timeseries[i+days],timeseries[i-days])
}else{
for(j in 2:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}
}
i <- i+1
}
return(timeseries)
}
meterid <- "f3523f2e-c5ff-4545-893b-0f3c335161e1"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
timeseries <- singleMeterData$val
days <- 7
i=1
is.na(timeseries[i]
is.na(timeseries[i])
is.na(timeseries[i])
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if( !is.null(timeseries[i-days]) || !is.na(timeseries[i-days])){
timeseries[i] <- ifelse(i< days,timeseries[i+days],timeseries[i-days])
}else{
for(j in 2:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}
}
i <- i+1
}
return(timeseries)
imputeFromNumOfDaysBefore <- function(timeseries,days){
timeseries <- singleMeterData$val
days <- 7
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if( !is.null(timeseries[i-days]) || !is.na(timeseries[i-days])){
timeseries[i] <- ifelse(i< days,timeseries[i+days],timeseries[i-days])
}else{
for(j in 2:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}
}
i <- i+1
}
return(timeseries)
}
meterid <- "f3523f2e-c5ff-4545-893b-0f3c335161e1"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
imputeFromNumOfDaysBefore <- function(timeseries,days){
timeseries <- singleMeterData$val
days <- 7
i=1
while(i < length(timeseries)){
if(is.na(timeseries[i]) ){
if(i <= days){
for(j in 1:12){
if(!is.na(timeseries[i+(days*j)])){
timeseries[i] <-  timeseries[i+(days*j)]
break
}
}
}else{
timeseries[i] <-  timeseries[i-days]
}
}
i <- i+1
}
return(timeseries)
}
meterid <- "f3523f2e-c5ff-4545-893b-0f3c335161e1"
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
plot(df$val,type='l')
plot(sevanDays,type="l")
df$val
sevanDays
par(mfrow=c(1,1))
plot(df$val,type='l')
plot(sevanDays,type="l")
source("timeseriesImpute.R")
pdf(file="./outs/test.pdf")
meterids <- unique(meterdata[,c("id")])
i=1
while( i < 10){
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
message("original -: ",sum(is.na(df$val))," predicted -: ",sum(is.na(sevanDays)))
singleMeterData$val <- sevanDays
i <- i+1
}
dev.off()
source("timeseriesImpute.R")
pdf(file="./outs/test.pdf")
meterids <- unique(meterdata[,c("id")])
i=1
while( i < length(meterids)){
meterid <- sample(meterids,1)
message("meterid : ",meterid)
singleMeterData <- meterdata[meterdata$id == meterid,]
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
df <- singleMeterData
sevanDays <- imputeFromNumOfDaysBefore(df$val,7)
par(mfrow=c(1,2))
print(plot(df$val,type='l'))
print(plot(sevanDays,type="l"))
message("original -: ",sum(is.na(df$val))," predicted -: ",sum(is.na(sevanDays)))
singleMeterData$val <- sevanDays
i <- i+1
}
dev.off()
setwd("smartmeter/")
source("libs.R")
source("dataset.R")
source("basevalue.R")
source("dailyPattern.R")
source("ratioPrevMA.R")
source("movingAverage.R")
source("normalization.R")
source("scaleFactor.R")
source("datesUtil.R")
source("timeseriesImpute.R")
meterdata <- trained_data_set("./inputs/daily_dmd_data_20170517.txt")
meterids <- unique(meterdata$id)
length(meterids)
todaysDate <-format(Sys.time(), "%a%b%d%Y%H%S")
pdf(file=paste0("./outs/meters_",todaysDate,"_plot.pdf"))
cyclePeriod <- 7
testcnt=length(meterids)
testcnt=300
i=1
error_summary <- c("id","mape")
while(i <= testcnt){
meterid <- sample(meterids,1)
message("Processing meter id - ",meterid)
i <- i + 1
singleMeterData <- meterdata[meterdata$id == meterid,]
if(nrow(singleMeterData) < 2 | length(singleMeterData) < 2 ){
message(" Data is not valid !! Missing rows or columns")
next
}
originalData <- singleMeterData
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
singleMeterData$val <- as.numeric(singleMeterData$val)
# missing value will be replaced by 7 days before or after when missing element is at start
singleMeterData$val <- imputeFromNumOfDaysBefore(singleMeterData$val,7)
indx <- apply(singleMeterData, 2, function(x) any(is.na(x) | is.infinite(x)))
if(TRUE %in% indx){
message(" Please check missing data !!! ")
}
countr = 0;
while(countr < 100){
countr <- countr + 1
meterid
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
tsMeterData <-as.numeric(singleMeterData$val)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData)-1,c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
# nrow(singleMeterData)
tsMeterData[length(tsMeterData)+1] <- 0
if(length(tsMeterData) != length(singleMeterData$val)){
message(" Please check - Need to add row in tsMeterData !")
}
prediction <- {}
prediction$basevalue <- basevalueForLongPrediction(tsMeterData,cyclePeriod,longPrediction)
prediction$movingAverage <- movingAverage(tsMeterData,cyclePeriod)
# prediction$movingAverage
prediction$dailyPattern <- dailyPattern(tsMeterData,prediction$movingAverage,cyclePeriod)
# prediction$dailyPattern
prediction$maxVector <- maxVector(tsMeterData,originalData$val,cyclePeriod)
# prediction$maxVector
prediction$normalization <- (prediction$dailyPattern*0.2/prediction$maxVector)+0.9
# prediction$normalization
prediction$basePrediction <- prediction$basevalue * prediction$normalization
# prediction$basePrediction
# nPrediction <- apply(prediction$basePrediction,prediction$maxVector, function(x,y))
nPrediction <- mapply(maxNormalization,prediction$basePrediction,prediction$maxVector)
prediction$basePrediction <- nPrediction
prediction$minVector <- minVector(prediction$basePrediction,cyclePeriod)
# prediction$minVector
prediction$minValueWeeklyTrend <- minValueWeeklyTrend(prediction$minVector)
# prediction$minValueWeeklyTrend
prediction$avgMinValues <- minValueAvg(prediction$minValueWeeklyTrend)
# prediction$avgMinValues
prediction$prediction <- prediction$basePrediction*prediction$avgMinValues
# prediction$prediction
prediction <- as.data.frame(prediction)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,as.character(nextDay),0,nextDay))
forecastData <- cbind(singleMeterData,prediction)
# str(forecastData)
forecastData$val[length(forecastData$val)] <- forecastData$basePrediction[length(forecastData$val)-1]
forecastData$id[length(forecastData$val)] <- meterid
forecastData$ts <- forecastData$ts1
fc <- as.data.frame(forecastData)
fc <- fc[-(nrow(fc)-1),]
singleMeterData <- fc
}
message(" y limits ",c(min(singleMeterData$prediction,na.rm = TRUE),max(singleMeterData$prediction, na.rm = TRUE)))
ylimMin <- 0
if( !is.infinite(min(singleMeterData$prediction,na.rm = TRUE))){
ylimMin <- min(singleMeterData$prediction,na.rm = TRUE)
}
ylimMax <- 1
if(!is.infinite(max(singleMeterData$prediction, na.rm = TRUE))){
ylimMax <- max(singleMeterData$prediction, na.rm = TRUE)
}
write.csv(fc,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
try(plot(0,0,xlim = c(1,length(tsMeterData)),ylim = c(ylimMin,ylimMax),type = "n",xlab = meterid))
historicalData <- meterdata[meterdata$id == meterid,]
lines(historicalData$val,type = 'l',col="blue")
lines(singleMeterData$prediction,type = 'l', col = "red")
lines(singleMeterData$basePrediction,type = 'l', col = "green")
abs_error <- abs(as.numeric(singleMeterData$val) - as.numeric(singleMeterData$prediction))/(as.numeric(singleMeterData$val))
mape <- sum(abs_error,na.rm = TRUE)*100/nrow(singleMeterData)
mape
error_summary <- rbind(error_summary,c(as.character(meterid),as.numeric(mape)))
}
longPrediction = 3
testcnt=length(meterids)
testcnt=300
i=1
error_summary <- c("id","mape")
while(i <= testcnt){
meterid <- sample(meterids,1)
message("Processing meter id - ",meterid)
i <- i + 1
singleMeterData <- meterdata[meterdata$id == meterid,]
if(nrow(singleMeterData) < 2 | length(singleMeterData) < 2 ){
message(" Data is not valid !! Missing rows or columns")
next
}
originalData <- singleMeterData
singleMeterData <- addMissingDates(data = singleMeterData, "ts1")
singleMeterData$val <- as.numeric(singleMeterData$val)
# missing value will be replaced by 7 days before or after when missing element is at start
singleMeterData$val <- imputeFromNumOfDaysBefore(singleMeterData$val,7)
indx <- apply(singleMeterData, 2, function(x) any(is.na(x) | is.infinite(x)))
if(TRUE %in% indx){
message(" Please check missing data !!! ")
}
countr = 0;
while(countr < 100){
countr <- countr + 1
meterid
singleMeterData <- singleMeterData[,c("id","ts","val","ts1")]
tsMeterData <-as.numeric(singleMeterData$val)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData)-1,c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,nextDay,0,nextDay))
# nrow(singleMeterData)
tsMeterData[length(tsMeterData)+1] <- 0
if(length(tsMeterData) != length(singleMeterData$val)){
message(" Please check - Need to add row in tsMeterData !")
}
prediction <- {}
prediction$basevalue <- basevalueForLongPrediction(tsMeterData,cyclePeriod,longPrediction)
prediction$movingAverage <- movingAverage(tsMeterData,cyclePeriod)
# prediction$movingAverage
prediction$dailyPattern <- dailyPattern(tsMeterData,prediction$movingAverage,cyclePeriod)
# prediction$dailyPattern
prediction$maxVector <- maxVector(tsMeterData,originalData$val,cyclePeriod)
# prediction$maxVector
prediction$normalization <- (prediction$dailyPattern*0.2/prediction$maxVector)+0.9
# prediction$normalization
prediction$basePrediction <- prediction$basevalue * prediction$normalization
# prediction$basePrediction
# nPrediction <- apply(prediction$basePrediction,prediction$maxVector, function(x,y))
nPrediction <- mapply(maxNormalization,prediction$basePrediction,prediction$maxVector)
prediction$basePrediction <- nPrediction
prediction$minVector <- minVector(prediction$basePrediction,cyclePeriod)
# prediction$minVector
prediction$minValueWeeklyTrend <- minValueWeeklyTrend(prediction$minVector)
# prediction$minValueWeeklyTrend
prediction$avgMinValues <- minValueAvg(prediction$minValueWeeklyTrend)
# prediction$avgMinValues
prediction$prediction <- prediction$basePrediction*prediction$avgMinValues
# prediction$prediction
prediction <- as.data.frame(prediction)
nextDay <- format(as.Date(singleMeterData[nrow(singleMeterData),c("ts1")])+2,"%Y-%m-%d")
singleMeterData <- rbind(singleMeterData,c(meterid,as.character(nextDay),0,nextDay))
forecastData <- cbind(singleMeterData,prediction)
# str(forecastData)
forecastData$val[length(forecastData$val)] <- forecastData$basePrediction[length(forecastData$val)-1]
forecastData$id[length(forecastData$val)] <- meterid
forecastData$ts <- forecastData$ts1
fc <- as.data.frame(forecastData)
fc <- fc[-(nrow(fc)-1),]
singleMeterData <- fc
}
message(" y limits ",c(min(singleMeterData$prediction,na.rm = TRUE),max(singleMeterData$prediction, na.rm = TRUE)))
ylimMin <- 0
if( !is.infinite(min(singleMeterData$prediction,na.rm = TRUE))){
ylimMin <- min(singleMeterData$prediction,na.rm = TRUE)
}
ylimMax <- 1
if(!is.infinite(max(singleMeterData$prediction, na.rm = TRUE))){
ylimMax <- max(singleMeterData$prediction, na.rm = TRUE)
}
write.csv(fc,file = paste0("./outs/",meterid,"_",todaysDate,".csv"))
try(plot(0,0,xlim = c(1,length(tsMeterData)),ylim = c(ylimMin,ylimMax),type = "n",xlab = meterid))
historicalData <- meterdata[meterdata$id == meterid,]
lines(historicalData$val,type = 'l',col="blue")
lines(singleMeterData$prediction,type = 'l', col = "red")
lines(singleMeterData$basePrediction,type = 'l', col = "green")
abs_error <- abs(as.numeric(singleMeterData$val) - as.numeric(singleMeterData$prediction))/(as.numeric(singleMeterData$val))
mape <- sum(abs_error,na.rm = TRUE)*100/nrow(singleMeterData)
mape
error_summary <- rbind(error_summary,c(as.character(meterid),as.numeric(mape)))
}
