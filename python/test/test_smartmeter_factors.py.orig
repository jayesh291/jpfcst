import unittest
import pandas as pd
import numpy as np
from source.BaseValue import baseValueForTsForecast
from source.MovingAverage import movingAverage
from source.DailyPattern import dailyPattern
from source.Normalization import maxVector
from source.ScaleFactor import minVector
from source.ScaleFactor import minValueAvg
from source.ScaleFactor import minValueWeeklyTrend

from decimal import *
getcontext().prec = 4
def addRoundList(input_list):
    return ["%.4f" % e for e in input_list ]

cyclePeriod=7

true_data =pd.read_csv('TestFile.csv')

true_bv = (true_data.base_values).tolist()

true_ma= (true_data.moving_average).tolist()

true_dp=(true_data.daily_pattern).tolist()

true_mv=(true_data.max_vector).tolist()

true_min_v=(true_data.min_vector).tolist()

true_normalization=(true_data.normalization).tolist()


# print(["%.4f" % e for e in movingAverage(true_data.val1,7)[0:len(true_bv)-1]])
# print(["%.4f" % e for e in true_ma[0:len(true_ma)-1]])

class TestUM(unittest.TestCase):
    maxDiff = None
    def setUp(self):
        pass
    def test_baseValueFunction(self):
        # from source.BaseValue import baseValueForTsForecast
        self.assertListEqual(baseValueForTsForecast(true_data.val1,7,3)[0:len(true_bv)-1],true_bv[0:len(true_bv)-1])

    def test_movingAverage(self):
        self.assertEqual(addRoundList(movingAverage(true_data.val1,7)[0:len(true_bv)-1]),addRoundList(true_ma[0:len(true_ma)-1]))

    def test_dailyPattern(self):
        self.assertEqual(addRoundList(dailyPattern(true_data.val1,true_ma,cyclePeriod)[0:len(true_bv)-1]),addRoundList(true_dp[0:len(true_dp)-1]))

    def test_normalization(self):
        self.assertEqual(addRoundList(np.array(true_dp)*0.2/np.array(true_mv)+0.9),addRoundList(true_normalization))


if __name__ == '__main__':
    unittest.main()

suite = unittest.TestLoader().loadTestsFromTestCase(TestUM)
unittest.TextTestRunner().run(suite)
